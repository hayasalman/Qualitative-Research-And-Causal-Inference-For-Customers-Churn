# -*- coding: utf-8 -*-
"""Retrospective-Case-Control-Observational-Study

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yG4Fyr9PFsWqXbLNEV41myp9x63SWVT6
"""

import warnings
warnings.filterwarnings("ignore")

!pip install CMH

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
import scipy
from google.colab import files
import io
from scipy.stats import fisher_exact
from cmh import CMH

uploaded = files.upload()

df = pd.read_csv(io.BytesIO(uploaded['Sampled_Customer_Churn_Records.csv']))
df

df['Gender'] = df['Gender'].apply(lambda x: 1 if x == 'Female' else 0)
label_encoder = preprocessing.LabelEncoder()
df['Geography_encoded'] = label_encoder.fit_transform(df['Geography'])
df['Card_Type_encoded'] = label_encoder.fit_transform(df['Card Type'])

plt.figure(figsize = (20, 6))

sns.heatmap(df.corr(), annot = True)

def age_group_func(age):
    ''''function to convert the numeric age values into defined age range either above or below the median age'''
    if 18 <= age <= 37:
        return '<=37'
    if 37 < age < 55:
        return '> 37'
    return '> 37'


def balance_group_func(balance):
    '''function to convert the numeric balance values into defined age range either above or below the median balance'''
    if 0 <= balance <= 100000:
        return '<= 100K'
    if 100000 < balance <= 200000:
        return '> 100K'
    return '> 100K'


df['Age_Category'] = df.apply(lambda x: age_group_func(x['Age']), axis=1)
df['Balance_Category'] = df.apply(lambda x: balance_group_func(x['Balance']), axis=1)


df['Encoded_Age'] = df['Age_Category'].apply(lambda x: 1 if x == '> 37' else 0)
df['Encoded_Balance'] = df['Balance_Category'].apply(lambda x: 1 if x == '> 100K' else 0)

churned_customers = df[df['Exited'] == 1]
all_customers = df.shape[0]

complains_churned_customers = churned_customers[churned_customers['Complain'] == 1].CustomerId.count()
non_complains_churned_customers = churned_customers[churned_customers['Complain'] == 0].CustomerId.count()

print('The churn rate of the cusomers who complained before: {} %'.format(round(complains_churned_customers/all_customers*100, 2)))
print('The churn rate of the cusomers who didn\'t complained before: {} %'.format(round(non_complains_churned_customers/all_customers, 5)*100))

female_churned_customers = churned_customers[churned_customers['Gender'] == 1].CustomerId.count()
male_churned_customers = churned_customers[churned_customers['Gender'] == 0].CustomerId.count()


print('The churn rate of the female cusomers: {} %'.format(round(female_churned_customers/all_customers*100, 2)))
print('The churn rate of the male cusomers: {} %'.format(round(male_churned_customers/all_customers*100, 2)))

nonact_churned_customers = churned_customers[churned_customers['IsActiveMember'] == 0].CustomerId.count()
act_churned_customers = churned_customers[churned_customers['IsActiveMember'] == 1].CustomerId.count()


print('The churn rate of the non-active member cusomers: {} %'.format(round(nonact_churned_customers/all_customers*100, 2)))
print('The churn rate of the active member cusomers: {} %'.format(round(act_churned_customers/all_customers*100, 2)))

age_group = df.groupby(df['Age_Category'])
round(churned_customers['Age_Category'].value_counts()/all_customers*100, 2)

bal_group = df.groupby(df['Balance_Category'])
round(churned_customers['Balance_Category'].value_counts()/all_customers*100, 2)

cases = df[df['Exited'] == 1]
controls = df[df['Exited'] == 0]

all_cases = cases.shape[0]
all_controls = controls.shape[0]

comp_cases = cases[cases['Complain'] == 1].CustomerId.count()
comp_controls = controls[controls['Complain'] == 1].CustomerId.count()

churn_cases = comp_cases / all_cases
churn_controls = comp_controls / all_controls

true_diff = churn_cases - churn_controls
true_diff

def adjusted_odd_ratio(n_cases, csaes, n_controls, controls):
    cases_odd_ratio = n_cases*csaes
    controls_odd_ratio = n_controls*controls
    odd_ratio = cases_odd_ratio/controls_odd_ratio
    result = f'the adjusted odd ratio of this stratum : {round(odd_ratio, 2)}'
    return result

def magnitude_confounding_func(crude_or, adjusted_or):
    magnitude_confounding = (crude_or - adjusted_or) /crude_or
    result = f'the magnitude of confounding is {round(magnitude_confounding, 1)*100}%'
    return result

def fisher_test_func(numerator1, denominator1, numerator2, denominator2):
    table = np.array([[numerator1, denominator1], [ numerator2 , denominator2]])
    OR, p_val = fisher_exact(table, alternative='two-sided')
    result = f'the crude odd ratio :{round(OR, 1)}, the p-value :{round(p_val, 1)}'
    return result

gender_pivot = pd.pivot_table(df, index=['Gender'], columns=['Exited'], values='CustomerId', aggfunc='count')
gender_pivot
fisher_test_func(1119, 919, 1696, 2409)
result = CMH(df, 'Gender', 'Exited', stratifier= 'Complain')
result

female_subgroup = df[df['Gender'] == 1]
pd.pivot_table(female_subgroup, index=['Complain'], columns=['Exited'], values='CustomerId', aggfunc='count')
adjusted_odd_ratio(1119, 0.5, 1, 1443)

male_subgroup = df[df['Gender'] == 0]
pd.pivot_table(male_subgroup, index=['Complain'], columns=['Exited'], values='CustomerId', aggfunc='count')
adjusted_odd_ratio(915, 4, 3, 2009)

magnitude_confounding_func(1.7, 0.54)

act_pivot = pd.pivot_table(df, index=['IsActiveMember'], columns=['Exited'], values='CustomerId', aggfunc='count')
act_pivot
fisher_test_func(1303, 735, 1849, 2256)

result = CMH(df, 'IsActiveMember', 'Exited', stratifier= 'Complain')
result
inact_subgroup = df[df['IsActiveMember'] == 0]
pd.pivot_table(inact_subgroup, index=['Complain'], columns=['Exited'], values='CustomerId', aggfunc='count')
adjusted_odd_ratio(1299, 4, 0.5, 1554)
act_subgroup = df[df['IsActiveMember'] == 1]
pd.pivot_table(act_subgroup, index=['Complain'], columns=['Exited'], values='CustomerId', aggfunc='count')
adjusted_odd_ratio(735, 0.5, 4, 1898)

age_pivot = pd.pivot_table(df, index=['Age_Category'], columns=['Exited'], values='CustomerId', aggfunc='count')
age_pivot
fisher_test_func(1576, 1426, 462, 2030)
result = CMH(df, 'Age_Category', 'Exited', stratifier= 'Complain')
result
over37_subgroup = df[df['Age_Category'] == '> 37']
pd.pivot_table(act_subgroup, index=['Complain'], columns=['Exited'], values='CustomerId', aggfunc='count')
adjusted_odd_ratio(735, 4, 0.5, 1898)

below37_subgroup = df[df['Age_Category'] == '<=37']
pd.pivot_table(below37_subgroup, index=['Complain'], columns=['Exited'], values='CustomerId', aggfunc='count')
adjusted_odd_ratio(461, 3, 1, 2027)

bal_pivot = pd.pivot_table(df, index=['Balance_Category'], columns=['Exited'], values='CustomerId', aggfunc='count')
bal_pivot
fisher_test_func(1211, 827, 1830, 2275)
result = CMH(df, 'Balance_Category', 'Exited', stratifier= 'Complain')
result
magnitude_confounding_func(1.8, 1.3)

comp_pivot = pd.pivot_table(df, index=['Complain'], columns=['Exited'], values='CustomerId', aggfunc='count')
comp_pivot
fisher_test_func(2034, 4, 4, 3452)
print('the log of the crude odd ratio : {}'.format(round(np.log(438835.5), 1)))