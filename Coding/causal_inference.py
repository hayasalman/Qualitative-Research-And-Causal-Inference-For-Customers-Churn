# -*- coding: utf-8 -*-
"""Causal-Inference

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tXM44EBiRl6dtLUXkX48Hvh-f5RM6CMq
"""

import warnings
warnings.filterwarnings("ignore")

!pip install dowhy

!pip install cdt

!pip install econml

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import dowhy
from dowhy import CausalModel
import cdt
import networkx as nx
from google.colab import files
import io
import econml
from sklearn.linear_model import LogisticRegressionCV

uploaded = files.upload()

data = pd.read_csv(io.BytesIO(uploaded['Encoded_Customer_Churn_Records.csv']))
data.head()

graph = cdt.independence.graph.Glasso()

skeleton = graph.predict(data)

plt.figure(figsize=(8,6))

nx.draw_networkx(skeleton)

"""## **Model 1 : Customers' Gender and Customers' Churn**"""

model1 = CausalModel(
    data = data,
    treatment = 'Gender',
    outcome= 'Exited',
    common_causes=['Complain']
)

identified_estimate_1 = model1.identify_effect(proceed_when_unidentifiable=True)

drlearner_estimate_1 = model1.estimate_effect(identified_estimate_1,
                                method_name="backdoor.econml.dr.LinearDRLearner",
                                confidence_intervals=True,
                                method_params={"init_params":{
                                                    'model_propensity': LogisticRegressionCV(cv=3, solver='lbfgs', multi_class='auto')
                                                    },
                                               "fit_params":{}
                                             })
print(drlearner_estimate_1)

drlearner_estimate_1.interpret()

refue_random_1 = model1.refute_estimate(identified_estimate_1, drlearner_estimate_1, method_name='random_common_cause', show_progress_bar=True)
print(refue_random_1)

refue_placebo_1 =model1.refute_estimate(identified_estimate_1, drlearner_estimate_1,
        method_name='placebo_treatment_refuter', placebo_type='permute')
print(refue_placebo_1)

refue_subset_1 = model1.refute_estimate(identified_estimate_1, drlearner_estimate_1,
       method_name='data_subset_refuter', show_progress_bar=True, subset_fraction=0.9)
print(refue_subset_1)

refue_unobserved_1 =model1.refute_estimate(identified_estimate_1, drlearner_estimate_1, method_name='add_unobserved_common_cause',
                                     confounders_effect_on_treatment='binary_flip', confounders_effect_on_outcome='linear',
                                    effect_strength_on_treatment=0.01, effect_strength_on_outcome=0.02)
print(refue_unobserved_1)

"""## **Model 2 : Customers' Activeness Status and Customers' Churn**"""

model2 = CausalModel(
    data = data,
    treatment = 'IsActiveMember',
    outcome= 'Exited',
    effect_modifiers= ['Complain']
)

identified_estimate_2 = model2.identify_effect(proceed_when_unidentifiable=True)

drlearner_estimate_2 = model2.estimate_effect(identified_estimate_2,
                                method_name="backdoor.econml.dr.LinearDRLearner",
                                confidence_intervals=True,
                                method_params={"init_params":{
                                                    'model_propensity': LogisticRegressionCV(cv=3, solver='lbfgs', multi_class='auto')
                                                    },
                                               "fit_params":{}
                                             })
print(drlearner_estimate_2)

refue_random_2 = model2.refute_estimate(identified_estimate_2, drlearner_estimate_2, method_name='random_common_cause', show_progress_bar=True)
print(refue_random_2)

refue_placebo_2 =model2.refute_estimate(identified_estimate_2, drlearner_estimate_2,
        method_name='placebo_treatment_refuter', placebo_type='permute')
print(refue_placebo_2)

refue_subset_2 = model2.refute_estimate(identified_estimate_2, drlearner_estimate_2,
       method_name='data_subset_refuter', show_progress_bar=True, subset_fraction=0.9)
print(refue_subset_2)

refue_unobserved_2 =model2.refute_estimate(identified_estimate_2, drlearner_estimate_2, method_name='add_unobserved_common_cause',
                                     confounders_effect_on_treatment='binary_flip', confounders_effect_on_outcome='linear',
                                    effect_strength_on_treatment=0.01, effect_strength_on_outcome=0.02)
print(refue_unobserved_2)

"""## **Model 3 : Customers' Age and Customers' Churn**"""

model3 = CausalModel(
    data = data,
    treatment = 'Age',
    outcome= 'Exited',
    effect_modifiers= ['Complain']
)

identified_estimate_3 = model3.identify_effect(proceed_when_unidentifiable=True)

drlearner_estimate_3 = model3.estimate_effect(identified_estimate_3,
                                method_name="backdoor.econml.dr.LinearDRLearner",
                                confidence_intervals=True,
                                method_params={"init_params":{
                                                    'model_propensity': LogisticRegressionCV(cv=3, solver='lbfgs', multi_class='auto')
                                                    },
                                               "fit_params":{}
                                             })
print(drlearner_estimate_3)

drlearner_estimate_3.interpret()

refue_random_3 = model3.refute_estimate(identified_estimate_3, drlearner_estimate_3, method_name='random_common_cause', show_progress_bar=True)
print(refue_random_3)

refue_placebo_3 =model3.refute_estimate(identified_estimate_3, drlearner_estimate_3,
        method_name='placebo_treatment_refuter', placebo_type='permute')
print(refue_placebo_3)

refue_subset_3 = model3.refute_estimate(identified_estimate_3, drlearner_estimate_3,
       method_name='data_subset_refuter', show_progress_bar=True, subset_fraction=0.9)
print(refue_subset_3)

refue_unobserved_3 = model3.refute_estimate(identified_estimate_3, drlearner_estimate_3, method_name='add_unobserved_common_cause',
                                     confounders_effect_on_treatment='binary_flip', confounders_effect_on_outcome='linear',
                                    effect_strength_on_treatment=0.01, effect_strength_on_outcome=0.02)
print(refue_unobserved_3)

"""## **Model 4 : Customers' Balance and Customers' Churn**"""

model4 = CausalModel(
    data = data,
    treatment = 'Balance',
    outcome= 'Exited',
    common_causes= ['Complain']
)

identified_estimate_4 = model4.identify_effect(proceed_when_unidentifiable=True)

drlearner_estimate_4 = model4.estimate_effect(identified_estimate_4,
                                method_name="backdoor.econml.dr.LinearDRLearner",
                                confidence_intervals=True,
                                method_params={"init_params":{
                                                    'model_propensity': LogisticRegressionCV(cv=3, solver='lbfgs', multi_class='auto')
                                                    },
                                               "fit_params":{}
                                             })
print(drlearner_estimate_4)

drlearner_estimate_4.interpret()

refue_random_4 = model4.refute_estimate(identified_estimate_4, drlearner_estimate_4, method_name='random_common_cause', show_progress_bar=True)
print(refue_random_4)

refue_placebo_4 =model4.refute_estimate(identified_estimate_4, drlearner_estimate_4,
        method_name='placebo_treatment_refuter', placebo_type='permute')
print(refue_placebo_4)

refue_subset_4 = model4.refute_estimate(identified_estimate_4, drlearner_estimate_4,
       method_name='data_subset_refuter', show_progress_bar=True, subset_fraction=0.9)
print(refue_subset_4)

refue_unobserved_4 = model4.refute_estimate(identified_estimate_4, drlearner_estimate_4, method_name='add_unobserved_common_cause',
                                     confounders_effect_on_treatment='binary_flip', confounders_effect_on_outcome='linear',
                                    effect_strength_on_treatment=0.01, effect_strength_on_outcome=0.02)
print(refue_unobserved_4)

"""## **Model 5 : Customers' Complaints and Customers' Churn**"""

model5 = CausalModel(
    data = data,
    treatment = 'Complain',
    outcome= 'Exited',
    effect_modifiers=['Gender','IsActiveMember', 'Encoded_Age', 'Encoded_Balance']
)

identified_estimate_5 = model5.identify_effect(proceed_when_unidentifiable=True)

drlearner_estimate_5 = model5.estimate_effect(identified_estimate_5,
                                method_name="backdoor.econml.dr.LinearDRLearner",
                                confidence_intervals=True,
                                method_params={"init_params":{
                                                    'model_propensity': LogisticRegressionCV(cv=3, solver='lbfgs', multi_class='auto')
                                                    },
                                               "fit_params":{}
                                             })
print(drlearner_estimate_5)

drlearner_estimate_5.interpret()

refue_random_5 = model5.refute_estimate(identified_estimate_5, drlearner_estimate_5, method_name='random_common_cause', show_progress_bar=True)
print(refue_random_5)

refue_placebo_5 =model5.refute_estimate(identified_estimate_5, drlearner_estimate_5,
        method_name='placebo_treatment_refuter', placebo_type='permute')
print(refue_placebo_5)

refue_subset_5 = model5.refute_estimate(identified_estimate_5, drlearner_estimate_5,
       method_name='data_subset_refuter', show_progress_bar=True, subset_fraction=0.9)
print(refue_subset_5)

refue_unobserved_5 =model5.refute_estimate(identified_estimate_5, drlearner_estimate_5, method_name='add_unobserved_common_cause',
                                     confounders_effect_on_treatment='binary_flip', confounders_effect_on_outcome='linear',
                                    effect_strength_on_treatment=0.01, effect_strength_on_outcome=0.02)
print(refue_unobserved_5)